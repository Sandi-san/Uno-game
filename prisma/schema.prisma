generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

//One instance of running Uno game for Multiplayer
model Game {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  decks       Deck[]
  players     Player[]
  maxPlayers  Int      @default(4)
  gameState   String   @default("Paused")
  currentTurn Int      @default(1) //currentPlayer's turn
  turnOrder   String   @default("Clockwise")
  topCardId   Int?
  topCard     Card?    @relation(fields: [topCardId], references: [id], onDelete: SetNull)

  //SOLUTION?: add discardDeckId in drawDeckId explicitno
}

model Deck {
  id     Int    @id @default(autoincrement())
  gameId Int?
  game   Game?  @relation(fields: [gameId], references: [id], onDelete: Cascade)
  size   Int
  cards  Card[]
}

model Player {
  id        Int       @id @default(autoincrement())
  gameId    Int?
  game      Game?     @relation(fields: [gameId], references: [id])
  createdAt DateTime  @default(now())
  joinedAt  DateTime?
  name      String
  score     Int
  hand      Hand?
}

model Hand {
  id         Int    @id @default(autoincrement())
  playerId   Int    @unique
  player     Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  indexFirst Int
  indexLast  Int
  cards      Card[]
}

model Card {
  id       Int    @id @default(autoincrement())
  priority Int
  value    Int
  color    String
  texture  String
  
  handId   Int?
  hand     Hand?  @relation(fields: [handId], references: [id], onDelete: Cascade)
  deckId   Int?
  deck     Deck?  @relation(fields: [deckId], references: [id], onDelete: Cascade)

  Game Game[] //topCard
}
